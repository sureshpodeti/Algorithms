 Following texts contains the concepts of greedy algorithm, and the technique to verify the greedy approach 
 that produces optimal solution

 Example 1: Job scheduling
    problem description: We have set of requests {1,2,...,n}; the ith request corresponds to 
    an interval of time starting at s(i) and finishing at f(i). we'll say that a  subset of the 
    requests is compatible if no two of them overlap in time, and our goal is to accept as 
    large a compatible subset as possible. compatible sets of maximum size will be called optimal

    algorithm: 
      ***********************************************************************
      ***********************************************************************
      Intially Let R be the set of all requests, and let A be empty
      While R is not yet empty
            Choose a request i ∈ R that has the smallest finishing time
            Add request i to A
            Delete all requests from R that are not compatible with request i
      EndWhile 
      Return the set A as the set of accepted requests
      ************************************************************************
      ************************************************************************ 
      Greedy notion: we are choosing greedily the request which has smallest finishing time
      at each sequencial step. 


     How can we ensure solution produced by our greedy algorithm is optimal(the one which we are looking for)?

    "GREEDY STAYS AHEAD" technique:
         Let A be the set returned by our greedy algorithm. what we need to show is that this
         solution is optimal. so, for purpose of comparision, let O be an optimal set of
         intervals. As, we know there may be many optimal solutions, and at best A is equal
         to a single one of them. we need to show that |A| = |O|, that is, that A contains
         the same number of intervals as O and hence is also an optimal solution


         The idea underlying the proof is: we will compare the partial solutions that the 
         greedy algorithm contructs to intial segments of the solution O, and show that the
         greedy algorithm is doing better in a step-by-step fashion

         proof:
           Let i1, ...,ik be the set of requests in A iin the order they were added to A.
           Note that |A| = k. similarly, let the set of requests in O be denoted by j1,...jm.
           our goal is to prove that m=k. Assume that the requests in O are also ordered in 
           the natural left-to-right order of the corresponding interval.
          
           we will compare the partial solutions that the greedy algorithm contructs to intial
           segments of the solution O, and show that the greedy algorithm is doing better in a step-by-step fashion

           Lemma-1: Greedy algorithm partial solution stays ahead of the partial solution of O.
                    Let f(ir) gives finish time for request r in set A. ∀r ≤ k, f(ir) ≤ f(jr)
           proof by induction:
               base case:
                    f(i1) ≤ f(j1) holds
               induction step:
                    Let us assume r>1, and our induction hypothesis that the  statement is true for r-1,
                    and we try to prove if for r.
                    
                    for r-1, f(ir-1) ≤ f(jr-1) holds (by assumption)
                    
                    starting time of jr request is less greater than the finish time of request r-1
                    i.e s(jr)  ≥ f(jr-1)  ≥ f(ir-1)
                        s(jr)  ≥ f(ir-1)  ----- 1
                    it says jr request should present in set A ( beacuse it compatible with set A)
                        f(ir-1) ≤ f(jr-1)  ----- 2
                    from eq.1 and eq.2, f(ir) ≤ f(jr)

              Thus, If we assume f(ir) ≤ f(jr) true, then
                                f(ir-1) ≤ f(jr-1) remains true
                    but we know , f(i1) ≤ f(j1) is true, it means
                                  f(i2) ≤ f(j2) ..... so on.
                    Hence, ∀r ≤ k, f(ir) ≤ f(jr) true.  
                    
           Lemma-2: The greedy algorithm returns an optimal set A
                proof by contradiction:
                   Assume A is not optimal, then an optimal set O must have more requests, that is
                   we must have m>k. at r=k , f(ik) ≤ f(jk). since, m>k , there is a requst jk+1 in O.
                   This request starts after request jk ends, and hence after ik ends.This means jk+1 must
                   have been included in the set A, and in this case m=k. Hence we arrived at contradiction
                   so, The set A returned is one of the optimal solution



                     
Example 2:
